// 스코프 : 변수나 함수가 영항을 미치는 범위
// 전역 스코프 : 함수 외부에 선언되어 파일 전체에 영향을 줌(따라서, 필요할 때 아니면 안쓰는 걸 추천)
// let a =10;
// function sum() {
//   console.log(`함수내부 : ${a}`);
// }
// sum ();
// console.log(`함수 외부 : ${a}`);

// 지역 스코프 :
// function sum() {
//   let a =10;
//   console.log(`함수 내부 : ${a}`)
// }
// sum();
// console.log(`함수 외부 : ${a}`);

// 블록 스코프 : 자바스크립트는 원래 함수 스코프를 따르는 언어 였지만,
// ES6 에서 블록스코프를 지원하는 let, const가 추가됨
// let a = 10;
// {
//     let b = 20;
//     console.log(`코드 블록 내부 a : ${a}`);
//     console.log(`코드 블록 내부 b : ${b}`);
// }
// console.log(`코드 블록 외부 a : ${a}`);
// console.log(`코드 블록 외부 b : ${b}`); // 오류

// 참조 우선 순위
let a = 10;
const b = 20;
function sum20() {
  let a = 50;
  const b = 70;
  console.log(`코드 블록 내부 a : ${a}`);
  console.log(`코드 블록 내부 b : ${b}`);
}
console.log(`코드 블록 외부 a : ${a}`);
console.log(`코드 블록 외부 b : ${b}`); 

// 즉시 실행 함수 : 함수를 정의하자마자 바로 실행하는 함수 (전역변수로 쓰지 않기 위해 사용하는 코드)
(function() {
  // 실행할 코드
  width = 500;
  height = 300;
  console.log(`너비 : ${width}, 높이 : ${height}`);
  init();
})(); // () : 실행 해라 -> aa(); : aa(참조의 의미), () (실행의 의미)

function init() {
  console.log("프로그램 실행을 위해서 초기화 작업 수행중.....")
}
